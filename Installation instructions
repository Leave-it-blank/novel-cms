sudo apt-get update
sudo apt-get upgrade

<strong>  installing PHP 8.0</strong>
 apt install software-properties-common
add-apt-repository ppa:ondrej/php
apt update
apt upgrade
Now you can install PHP 8:
apt install php8.0-fpm
To test if you have PHP 8:
php -v
To check if the PHP-fpm is up and running:
systemctl status php8.0-fpm
Now we can install all PHP dependencies for your Laravel 8 application:
apt-get install php8.0-mysql php8.0-mbstring php8.0-xml php8.0-bcmath

<strong> install composer now~ </strong>
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"
sudo mv composer.phar /usr/local/bin/composer

Install Mysql 

sudo apt install mysql-server
sudo mysql_secure_installation

Creating db / user
sudo mysql
CREATE DATABASE db_laravel8;
CREATE USER 'userdb'@'localhost' IDENTIFIED BY 'somepassword';
GRANT ALL PRIVILEGES ON * . * TO 'userdb'@'localhost';
FLUSH PRIVILEGES;

Now CLone the repo

and cd Kawai
then you run composer install.

now u get errors so u use these noob,

composer update --ignore-platform-reqs

run this to make composer faster

sudo apt-get install php-curl


Problem 1
    - phpoffice/phpspreadsheet is locked to version 1.18.0 and an update of this package was not requested.
    - phpoffice/phpspreadsheet 1.18.0 requires ext-gd * -> it is missing from your system. Install or enable PHP's gd extension.
problem 2 , all mostly solved below.
Solution
sudo apt install php-xml
sudo apt install php8.0-gd
sudo apt install php8.0-mbstring
sudo apt install php-zip

solved.




NPM INSTALL 

Download the install script
Using curl, or wget, download the installation script. In the URL below make sure you replace v0.35.0 with the latest version of nvm.

curl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh -o install_nvm.sh
It's not a bad idea to open the install script and inspect its contents given that you just downloaded it from the Internet.

Run the install script
Run the install script with bash.

bash install_nvm.sh
This script clones the nvm repository into ~/.nvm. Then it updates your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc) to source the nvm.sh it contains.

You can confirm that your profile is updated by looking at the install script's output to determine which file it used. Look for something like the following in that file:

export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
Restart your terminal
In order to pick up the changes to your profile either close and reopen the terminal, or manually source your respective ~/.profile.

Example:

source ~/.bash_profile
Verify it worked
Finally, you can verify that it's installed with the command command:

command -v nvm
Should return nvm. Note: You can't use the which command with nvm since it's a shell function and not an actual application.

See what it does
Finally, run the nvm command to get a list of all the available sub-commands and to further verify that installation worked.

Use nvm to install the latest LTS release of Node.js
Now that you've got nvm installed let's use it to install, and use, the current LTS version of Node.js.

nvm install --lts
# Output
Installing latest LTS version.
Downloading and installing node v10.16.3...
Downloading https://nodejs.org/dist/v10.16.3/node-v10.16.3-darwin-x64.tar.xz...
######################################################################## 100.0%
Computing checksum with sha256sum
Checksums matched!
Now using node v10.16.3 (npm v6.9.0)
Creating default alias: default -> lts/* (-> v10.16.3)
Verify it worked, and that the version is correct:

node --version
# => v10.16.3
which node
# => /Users/joe/.nvm/versions/node/v10.16.3/bin/node
Note this line Creating default alias: default -> lts/* (-> v10.16.3). This indicates that nvm has set lts/* as the default alias. Practically this means that anytime you start a new shell, and the nvm.sh script is sourced, it will default that shell to using the installed lts release. You can change this behavior using the nvm alias command.

Example to set the default version of node to use when starting a new shell to 10.0.0:


